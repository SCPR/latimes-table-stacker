<pre><code>ooooooooooooo            .o8       oooo             .oooooo..o     .                       oooo                           
8'   888   `8           "888       `888            d8P'    `Y8   .o8                       `888                           
     888       .oooo.    888oooo.   888   .ooooo.  Y88bo.      .o888oo  .oooo.    .ooooo.   888  oooo   .ooooo.  oooo d8b 
     888      `P  )88b   d88' `88b  888  d88' `88b  `"Y8888o.    888   `P  )88b  d88' `"Y8  888 .8P'   d88' `88b `888""8P 
     888       .oP"888   888   888  888  888ooo888      `"Y88b   888    .oP"888  888        888888.    888ooo888  888     
     888      d8(  888   888   888  888  888    .o oo     .d8P   888 . d8(  888  888   .o8  888 `88b.  888    .o  888     
    o888o     `Y888""8o  `Y8bod8P' o888o `Y8bod8P' 8""88888P'    "888" `Y888""8o `Y8bod8P' o888o o888o `Y8bod8P' d888b    </code></pre>

p=. Publish spreadsheets as interactive tables. And do it on deadline.

You can see an example table working "here":http://table-stacker.appspot.com/.

h2. Features

* Convert a CSV file into an interactive HTML table that sorts, filters and paginates
* Quickly publish interactives tables to Google App Engine and serve them on the web for free
* Instantly syndicate data as CSV, XLS and JSON
* Post an RSS feed and sitemap that promote the latest data
* Link similar datasets together with blog-style tagging

h2. Getting Started

h3. *01. Register a new application with Google App Engine.*

Go to "https://appengine.google.com/":https://appengine.google.com/ and follow their instructions.

h3. *02. Clone the code from this repository to your development machine*

I like to put things in a virtualenv like this.
<pre><code>$ virtualenv --no-site-packages table-stacker
$ cd table-stacker
$ git clone git://github.com/datadesk/latimes-table-stacker.git project
$ cd project</code></pre>

h3. *03. Configure the apps.yaml file with your Google App Engine application id*

<pre><code>application: your-app-id-here</code></pre>

h3. *04. Open a second terminal tab and fire up the development server*

You'll see me using python2.5, since that's what Google App Engine requires.
<pre><code>$ python2.5 manage.py runserver</code></pre>

h3. *05. Load the example table*

You'll be asked to log in with your Google App Engine credentials, don't worry. That's what's supposed to happen.
<pre><code>python manage.py loadtable major-us-coal-mines-2009 --host=localhost:8000</code></pre>
If you want to peek under the hood and see how it works, check out the YAML file in the yaml directory.

h3. *06. Check it out in your browser*

You should see our demo table, ready to serve at http://localhost:8000/

h3. *07. Upload your app to appspot.com*

<pre><code>$ python2.5 manage.py update</code></pre>

h3. *08. Load the demo recipe to your live site*

Notice how you leave out the host option this time. These commands hit your live site by default.
<pre><code>python2.5 manage.py loadtable major-us-coal-mines-2009</code></pre>

h3. *09. Check out your site!*

You should find it at http://your-app-id-here.appspot.com You might draw Django errors for a few minutes as the app builds its indexes, but don't worry. It'll be ready after you have a cup of coffee.

h3. *10. Try configuring and loading your own table*

YAML files go in the yaml folder. Corresponding CSV files in the csv folder.

h2. Credits

This project would not be possible without the generous work of:

* "ProPublica's News Application Desk":http://www.propublica.org/nerds, and particularly "Jeff Larson":https://github.com/thejefflarson, who developed the Ruby libraries "table-fu":https://github.com/propublica/table-fu and "table-setter":https://github.com/propublica/table-setter.
* "Chris Amico":https://github.com/eyeseast, who did the noble work of "porting table-fu to Python":https://github.com/eyeseast/python-tablefu.
* Christian Bach, the man who gave us "tablesorter":http://tablesorter.com/docs/.
* The army of people who make something like "google-app-engine-django":http://code.google.com/p/google-app-engine-django/ possible.








